#pragma config(Motor,  port2,           RightMotor,    tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port4,           WheelMotor,    tmotorServoContinuousRotation, openLoop)
#pragma config(Motor,  port7,           DumpMotor,     tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port9,           LeftMotor,     tmotorServoContinuousRotation, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

bool reversed = false, reversed_PrevVal = reversed;
int wheelSpeed = 127, dumpSpeed = 127;

void ProcessReverse()
{
	if(vexRT[Btn8R] == 1 && reversed == reversed_PrevVal)
		reversed = !reversed;
	else if(vexRT[Btn8R] == 0 && reversed != reversed_PrevVal)
		reversed_PrevVal = reversed;
}

void WheelControl()
{
	if(vexRT[Btn6U] == 1)
		motor[WheelMotor] = wheelSpeed;
	else if(vexRT[Btn6D] == 1)
		motor[WheelMotor] = (wheelSpeed * (-1));
	else
		motor[WheelMotor] = 0;
}



void DriveControl()
{
motor[RightMotor] = ((reversed ? -1 : 1) * vexRT[Ch2]);
motor[LeftMotor] = ((reversed ? -1 : 1) * vexRT[Ch3]);
}

void DumpControl(){
	if (vexRT[Btn5U] == 1){
		motor[DumpMotor] = dumpSpeed;
		motor[WheelMotor] = (wheelSpeed);
	}
	else if(vexRT[Btn5D] == 1)
		motor[DumpMotor] = (dumpSpeed * (-1));
	else{
		motor[DumpMotor] = 0;
		motor[WheelMotor] = 0;
	}
}



task main(){
	while(true)
	{
		//Handle reverse controls
		ProcessReverse();
		//Wheel Control
		WheelControl();
		//Drive Control
		DriveControl();
		//Dump Control
		DumpControl();
	}
}
